#+title: Rust学习笔记
#+author: 覃荣军

* 类型系统

** 基本类型

| 类型        | 长度(单位:字节) | 备注         |
|-------------+-----------------+--------------|
| i8/u8       |               8 |              |
| i16/u16     |              16 |              |
| i32/u32     |              32 |              |
| i64/u64     |              64 |              |
| i128/u128   |             128 |              |
| isize/usize |            arch | depend on os |
| f32         |              32 |              |
| f64         |              64 |              |
| char        |               4 | Unicode      |
| bool        |               1 |              |

*** 整型(i8, i16, i32, i64....)

#+begin_src rust
  fn main() {
      // 自动类型推断
      // int为i32
      let i = 20;

      // 自定类型
      let j: i8 = 6;

      // arch自适应长度
      // 32位操作系统上是32位
      // 64位操作系统上是64位
      isize is = 30;
  }
#+end_src

*** 浮点型(f32, f64)

#+begin_src rust
  fn main() {
      let f: f32 = 10.0;
      let d: f64 = 20.0;
      println!("f = {f} d = {d}")
  }
#+end_src

*** 字符(char)

#+begin_src rust
  fn main() {
      let c = 'c';
      println("{c}");
  }
#+end_src

*** 布尔类型(bool)

** 复合类型

*** 元组

#+begin_src rust
  fn main() {
      let tup: (i32, f64, u8) = (500, 6.4, 1);
      println!("{tup} {tup.0} {tup.1} {tup.2}");
  }
#+end_src

*** 数组

#+begin_src rust
  fn main() {
      let nums = [1, 3, 5, 6, 9];
      for n in nums {
          print!("{n} ");
      }
      println!("");
  }
#+end_src

* 函数

#+begin_src rust
  fn name(arg: arg_type) -> return_type {
  }
#+end_src


* 控制流程
#+begin_src rust
  fn main() {
      let mut i = 0;
      // while 
      while i < 10 {
          println!("{}", i);
      }
      /// for
      for i in [1, 2, 3, 4] {
          println("{}", i);
      }
      /// loop
      'l1 loop {
          loop {
              break 'l1
          }
      }
      ///

  }
#+end_src

* 所有权

#+begin_src C++
  #include<stdio.h>
  int main() {
    printf("%s\n", "hello world");
    return 0;
  }
#+end_src

#+RESULTS:
: hello world

#+begin_src C++
  #include<iostream>
  using namespace std;
  int main() {
    return 0;
  }
#+end_src

* 集合类型


* 错误处理

* 闭包
