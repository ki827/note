#+TITLE: JVM
#+AUTHOR: qinrongjun
#+DATE: <2024-02-21 Wed>

* JVM

** JVM 内存划分

| 内存类型 | 备注     |
|----------+----------|
| 方法区   | 线程共享 |
| 堆       | 线程共享 |
| 程序计数 | 线程私有 |
| 栈       | 线程私有 |

*** 方法区

*** 堆

*** 程序计数器

线程私有，记录当前线程的执行位置，在线程切换过程中，通过读取此信息获取上一次程序执行到的位置，继续执行；
是JVM规范中唯一一个没有定义OOM的区域。

*** 栈

线程私有， 其中比较值得关注的就是局部变量表。

| 数据类型       | 样例                                        | 备注                                                |
|----------------+---------------------------------------------+-----------------------------------------------------|
| 基本数据类型   | boolea,byte,char,sort,int,float,long,double | long和dobbule占用两个插槽，其余数据类型占据一个插槽 |
| reference      | Object o = new Object();                    | o存储在栈上，内容为一个地址，指向堆                 |
| return address | doSomeThing()                               |                                                     |

槽的大小(32位或64位)取决与虚拟机的实现。

**** 虚拟机栈

用于JVM本身，在栈空间不足时会抛出OutOfMemoryError异常，在栈深度超过最大深度时，会抛出StackOverflowError异常。

**** 本地方法栈

用于Native方法，也就是C相关， 在栈空间不足时会抛出OutOfMemoryError异常，在栈深度超过最大深度时，会抛出StackOverflowError异常。

*** 直接内存

这部分内存不属于JVM，而是Native(C)直接使用，

** 类加载机制


** 内存屏障

** 你好
